// Code generated by mockery v2.51.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	skip "github.com/zackarysantana/goskip"
)

// MockControlClient is an autogenerated mock type for the ControlClient type
type MockControlClient struct {
	mock.Mock
}

type MockControlClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockControlClient) EXPECT() *MockControlClient_Expecter {
	return &MockControlClient_Expecter{mock: &_m.Mock}
}

// CreateResourceInstance provides a mock function with given fields: ctx, resource, params
func (_m *MockControlClient) CreateResourceInstance(ctx context.Context, resource string, params interface{}) (string, error) {
	ret := _m.Called(ctx, resource, params)

	if len(ret) == 0 {
		panic("no return value specified for CreateResourceInstance")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (string, error)); ok {
		return rf(ctx, resource, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) string); ok {
		r0 = rf(ctx, resource, params)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, resource, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControlClient_CreateResourceInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateResourceInstance'
type MockControlClient_CreateResourceInstance_Call struct {
	*mock.Call
}

// CreateResourceInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
//   - params interface{}
func (_e *MockControlClient_Expecter) CreateResourceInstance(ctx interface{}, resource interface{}, params interface{}) *MockControlClient_CreateResourceInstance_Call {
	return &MockControlClient_CreateResourceInstance_Call{Call: _e.mock.On("CreateResourceInstance", ctx, resource, params)}
}

func (_c *MockControlClient_CreateResourceInstance_Call) Run(run func(ctx context.Context, resource string, params interface{})) *MockControlClient_CreateResourceInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockControlClient_CreateResourceInstance_Call) Return(_a0 string, _a1 error) *MockControlClient_CreateResourceInstance_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControlClient_CreateResourceInstance_Call) RunAndReturn(run func(context.Context, string, interface{}) (string, error)) *MockControlClient_CreateResourceInstance_Call {
	_c.Call.Return(run)
	return _c
}

// DeleteResourceInstance provides a mock function with given fields: ctx, uuid
func (_m *MockControlClient) DeleteResourceInstance(ctx context.Context, uuid string) error {
	ret := _m.Called(ctx, uuid)

	if len(ret) == 0 {
		panic("no return value specified for DeleteResourceInstance")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, uuid)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockControlClient_DeleteResourceInstance_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteResourceInstance'
type MockControlClient_DeleteResourceInstance_Call struct {
	*mock.Call
}

// DeleteResourceInstance is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
func (_e *MockControlClient_Expecter) DeleteResourceInstance(ctx interface{}, uuid interface{}) *MockControlClient_DeleteResourceInstance_Call {
	return &MockControlClient_DeleteResourceInstance_Call{Call: _e.mock.On("DeleteResourceInstance", ctx, uuid)}
}

func (_c *MockControlClient_DeleteResourceInstance_Call) Run(run func(ctx context.Context, uuid string)) *MockControlClient_DeleteResourceInstance_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockControlClient_DeleteResourceInstance_Call) Return(_a0 error) *MockControlClient_DeleteResourceInstance_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControlClient_DeleteResourceInstance_Call) RunAndReturn(run func(context.Context, string) error) *MockControlClient_DeleteResourceInstance_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceKey provides a mock function with given fields: ctx, resource, key, params
func (_m *MockControlClient) GetResourceKey(ctx context.Context, resource string, key interface{}, params interface{}) ([]byte, error) {
	ret := _m.Called(ctx, resource, key, params)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceKey")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) ([]byte, error)); ok {
		return rf(ctx, resource, key, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}, interface{}) []byte); ok {
		r0 = rf(ctx, resource, key, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}, interface{}) error); ok {
		r1 = rf(ctx, resource, key, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControlClient_GetResourceKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceKey'
type MockControlClient_GetResourceKey_Call struct {
	*mock.Call
}

// GetResourceKey is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
//   - key interface{}
//   - params interface{}
func (_e *MockControlClient_Expecter) GetResourceKey(ctx interface{}, resource interface{}, key interface{}, params interface{}) *MockControlClient_GetResourceKey_Call {
	return &MockControlClient_GetResourceKey_Call{Call: _e.mock.On("GetResourceKey", ctx, resource, key, params)}
}

func (_c *MockControlClient_GetResourceKey_Call) Run(run func(ctx context.Context, resource string, key interface{}, params interface{})) *MockControlClient_GetResourceKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}), args[3].(interface{}))
	})
	return _c
}

func (_c *MockControlClient_GetResourceKey_Call) Return(_a0 []byte, _a1 error) *MockControlClient_GetResourceKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControlClient_GetResourceKey_Call) RunAndReturn(run func(context.Context, string, interface{}, interface{}) ([]byte, error)) *MockControlClient_GetResourceKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetResourceSnapshot provides a mock function with given fields: ctx, resource, params
func (_m *MockControlClient) GetResourceSnapshot(ctx context.Context, resource string, params interface{}) ([]byte, error) {
	ret := _m.Called(ctx, resource, params)

	if len(ret) == 0 {
		panic("no return value specified for GetResourceSnapshot")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) ([]byte, error)); ok {
		return rf(ctx, resource, params)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) []byte); ok {
		r0 = rf(ctx, resource, params)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, resource, params)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockControlClient_GetResourceSnapshot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetResourceSnapshot'
type MockControlClient_GetResourceSnapshot_Call struct {
	*mock.Call
}

// GetResourceSnapshot is a helper method to define mock.On call
//   - ctx context.Context
//   - resource string
//   - params interface{}
func (_e *MockControlClient_Expecter) GetResourceSnapshot(ctx interface{}, resource interface{}, params interface{}) *MockControlClient_GetResourceSnapshot_Call {
	return &MockControlClient_GetResourceSnapshot_Call{Call: _e.mock.On("GetResourceSnapshot", ctx, resource, params)}
}

func (_c *MockControlClient_GetResourceSnapshot_Call) Run(run func(ctx context.Context, resource string, params interface{})) *MockControlClient_GetResourceSnapshot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *MockControlClient_GetResourceSnapshot_Call) Return(_a0 []byte, _a1 error) *MockControlClient_GetResourceSnapshot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockControlClient_GetResourceSnapshot_Call) RunAndReturn(run func(context.Context, string, interface{}) ([]byte, error)) *MockControlClient_GetResourceSnapshot_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateInputCollection provides a mock function with given fields: ctx, collection, updates
func (_m *MockControlClient) UpdateInputCollection(ctx context.Context, collection string, updates []skip.CollectionData) error {
	ret := _m.Called(ctx, collection, updates)

	if len(ret) == 0 {
		panic("no return value specified for UpdateInputCollection")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []skip.CollectionData) error); ok {
		r0 = rf(ctx, collection, updates)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockControlClient_UpdateInputCollection_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateInputCollection'
type MockControlClient_UpdateInputCollection_Call struct {
	*mock.Call
}

// UpdateInputCollection is a helper method to define mock.On call
//   - ctx context.Context
//   - collection string
//   - updates []skip.CollectionData
func (_e *MockControlClient_Expecter) UpdateInputCollection(ctx interface{}, collection interface{}, updates interface{}) *MockControlClient_UpdateInputCollection_Call {
	return &MockControlClient_UpdateInputCollection_Call{Call: _e.mock.On("UpdateInputCollection", ctx, collection, updates)}
}

func (_c *MockControlClient_UpdateInputCollection_Call) Run(run func(ctx context.Context, collection string, updates []skip.CollectionData)) *MockControlClient_UpdateInputCollection_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]skip.CollectionData))
	})
	return _c
}

func (_c *MockControlClient_UpdateInputCollection_Call) Return(_a0 error) *MockControlClient_UpdateInputCollection_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockControlClient_UpdateInputCollection_Call) RunAndReturn(run func(context.Context, string, []skip.CollectionData) error) *MockControlClient_UpdateInputCollection_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockControlClient creates a new instance of MockControlClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockControlClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockControlClient {
	mock := &MockControlClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
